#include <bits/stdc++.h>
#pragma GCC optimize ("O3")
#pragma GCC target ("sse4")
using namespace std;
#define int long long 
#define fastio()  ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define ll long long
#define pb push_back
#define ppb pop_back
#define pf push_front
#define all(v) v.begin(), v.end()
#define f first
#define s second
#define lb(v, k) lower_bound(all(v), k)
#define ub(v, k) upper_bound(all(v), k)
#define sorta(v) sort(all(v))
#define sortd(v) sort(all(v), greater<int>())
#define minv(v) min_element(all(v))
#define maxv(v)max_element(all(v))
#define loop(i,a,b) for(int i = a; i <b; i++)
#define rloop(i,a,b) for(int i = a; i >= b; i--)
#define cntBit(n) __builtin_popcountll(n)
#define sumarr(v)  accumulate(all(v),0)
#define takearr(v, n) loop(i, 0, n ){ cin >> v[i];}
#define parr(v,n)  loop(i,0,n){cout<<v[i]<<" ";}
#define yes  cout<<"YES"<<endl;
#define no   cout<<"NO"<<endl;
#define vint    vector<int>v
#define ump   unordered_map<int,int>ump;
#define ust   unordered_set<int>ust;
const int m = 1e9+7;
const int N = 1e7+1;
const int md=998244353;
int BinPow(int a,int b){int ans = 1;while(b){if(b&1){ans  = (ans*a);}b >>= 1;a = (a*a);}return ans;}
int BinPowmod(int a,int b,int mod){int ans = 1;while(b){if(b&1){ans  = (ans*a)%mod;}b >>= 1;a = (a*a)%mod;}return ans%mod;}
int MI(int a,int m){return BinPow(a,m-2);}  //multiplicative inverse (prime)
int gcd(int a,int b){return b?gcd(b,a%b):a;}
int lcm(int a,int b){return (a*b)%m/gcd(a,b);}
bool isPerfectSquare(int x){if(x >= 0){int sr = sqrt(x);return (sr*sr == x);}return false;} 
bool isPowerOfTwo(int n){if(n==0)return false;return (ceil(log2(n)) == floor(log2(n)));} // return x && ~(x&(x-1))
int  binstringtoint(string s){return stoi(s,0,2);}
bool decsort(vector<int>vec){for(int i=1;i<vec.size();i++){if(vec[i]>vec[i-1])return false;}return true;}
bool asssort(vector<int>vec){for(int i=1;i<vec.size();i++){if(vec[i]<vec[i-1])return false;}return true;}
int digit_sum(int n) {int ret = 0;while(n) {ret += n % 10; n /= 10;}return ret;}
 

void solve(){  
     
    int n;
    cin>>n;
    
    
    
    

    }
    
    
    
    
        
signed main(){

// #ifndef ONLINE_JUDGE
//     freopen("input.txt", "r", stdin);
//     freopen("output.txt", "w", stdout);
//     //freopen("error.txt","w", stderr);
// #endif
   
  
 //   fastio();
   

      int t;
      cin>>t;
      while(t--){
        solve();
    }
    

    return 0;
}
